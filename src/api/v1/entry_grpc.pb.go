// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: src/api/v1/entry.proto

package ezgRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Entry_ActionClient is the client API for Entry_Action service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Entry_ActionClient interface {
	Insert(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*InsertResponse, error)
	Modify(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*ModifyResponse, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*Entry, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Entries, error)
}

type entry_ActionClient struct {
	cc grpc.ClientConnInterface
}

func NewEntry_ActionClient(cc grpc.ClientConnInterface) Entry_ActionClient {
	return &entry_ActionClient{cc}
}

func (c *entry_ActionClient) Insert(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entry_Action/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entry_ActionClient) Modify(ctx context.Context, in *Entry, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := c.cc.Invoke(ctx, "/api.v1.Entry_Action/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entry_ActionClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*Entry, error) {
	out := new(Entry)
	err := c.cc.Invoke(ctx, "/api.v1.Entry_Action/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entry_ActionClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*Entries, error) {
	out := new(Entries)
	err := c.cc.Invoke(ctx, "/api.v1.Entry_Action/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Entry_ActionServer is the server API for Entry_Action service.
// All implementations must embed UnimplementedEntry_ActionServer
// for forward compatibility
type Entry_ActionServer interface {
	Insert(context.Context, *Entry) (*InsertResponse, error)
	Modify(context.Context, *Entry) (*ModifyResponse, error)
	Retrieve(context.Context, *RetrieveRequest) (*Entry, error)
	List(context.Context, *ListRequest) (*Entries, error)
	mustEmbedUnimplementedEntry_ActionServer()
}

// UnimplementedEntry_ActionServer must be embedded to have forward compatible implementations.
type UnimplementedEntry_ActionServer struct {
}

func (UnimplementedEntry_ActionServer) Insert(context.Context, *Entry) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedEntry_ActionServer) Modify(context.Context, *Entry) (*ModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedEntry_ActionServer) Retrieve(context.Context, *RetrieveRequest) (*Entry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedEntry_ActionServer) List(context.Context, *ListRequest) (*Entries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEntry_ActionServer) mustEmbedUnimplementedEntry_ActionServer() {}

// UnsafeEntry_ActionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Entry_ActionServer will
// result in compilation errors.
type UnsafeEntry_ActionServer interface {
	mustEmbedUnimplementedEntry_ActionServer()
}

func RegisterEntry_ActionServer(s grpc.ServiceRegistrar, srv Entry_ActionServer) {
	s.RegisterService(&Entry_Action_ServiceDesc, srv)
}

func _Entry_Action_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Entry_ActionServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entry_Action/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Entry_ActionServer).Insert(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entry_Action_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Entry_ActionServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entry_Action/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Entry_ActionServer).Modify(ctx, req.(*Entry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entry_Action_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Entry_ActionServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entry_Action/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Entry_ActionServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entry_Action_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Entry_ActionServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.Entry_Action/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Entry_ActionServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entry_Action_ServiceDesc is the grpc.ServiceDesc for Entry_Action service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entry_Action_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.Entry_Action",
	HandlerType: (*Entry_ActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _Entry_Action_Insert_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _Entry_Action_Modify_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Entry_Action_Retrieve_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Entry_Action_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/v1/entry.proto",
}
